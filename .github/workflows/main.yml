name: Flutter Build & Release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target: [android, ios, windows, macos, linux]
        include:
          - target: android
            os: macos-latest
          - target: ios
            os: macos-latest
          - target: macos
            os: macos-latest
          - target: windows
            os: windows-latest
          - target: linux
            os: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK (Android)
        if: matrix.target == 'android'
        run: flutter build apk --release

      - name: Build IPA (iOS)
        if: matrix.target == 'ios'
        run: flutter build ipa --no-codesign

      - name: Build Windows
        if: matrix.target == 'windows'
        run: flutter build windows

      - name: Build macOS
        if: matrix.target == 'macos'
        run: flutter build macos

      - name: Build Linux
        if: matrix.target == 'linux'
        run: flutter build linux

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: build-${{ matrix.target }}
          path: |
            build/app/outputs/flutter-apk/*.apk
            build/ios/iphoneos/*.app
            build/windows/runner/Release/*.exe
            build/macos/Build/Products/Release/*.app
            build/linux/x64/release/bundle/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Zip all builds
        run: |
          cd artifacts
          zip -r flutter_builds_${{ env.VERSION }}.zip .

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.VERSION }}
          artifacts: artifacts/flutter_builds_${{ env.VERSION }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}
